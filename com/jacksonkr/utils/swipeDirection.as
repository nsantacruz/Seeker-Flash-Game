package com.jacksonkr.utils {	import flash.display.DisplayObjectContainer;	import flash.display.Shape;		/**	 * Takes an array of moves and decides the ultimate direction	 *	 * returns int: 1 if the direction was positive. 0 if the direction was neutral / undecided. -1 if the direction was negative;	 */	public function swipeDirection(array:Array):int {		var cur_dir:int;		var last_dir:int;		var last_val:Number;				// remove the last piece of data (it doesn't seem to be completely accurate		array.pop();		trace('---');		trace(array);				for each(var val:Number in array) {			if(!isNaN(last_val) && !isNaN(last_dir) && !isNaN(cur_dir)) {				// If there's not a last direction (which happens on first process), just use the current value.				if(!last_dir && array.length > 1) {					if(val >= last_val) {						trace('initial dir', val, last_val, 1);						last_dir = cur_dir = 1;					} else {						trace('initial dir', val, last_val, -1);						last_dir = cur_dir = -1;					}				}								// did the direction switch?				if(val < last_val && last_dir >= 0) {					// direction switched to neg					trace('dir change', last_dir, cur_dir, -1)					last_dir = -1;					--cur_dir;				} else if(val > last_val && last_dir <= 0) {					// direction switched to pos					trace('dir change', last_dir, cur_dir, 1);					last_dir = 1;					++cur_dir;				}			}						//set the last_val so we have it for next process.			last_val = val;		}				return cur_dir;	}}