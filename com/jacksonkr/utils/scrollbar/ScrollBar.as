package com.jacksonkr.utils.scrollbar {	import caurina.transitions.Tweener;	import flash.display.Sprite;	import flash.display.SimpleButton;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;		public class ScrollBar extends Sprite {		private var _clickProps:Object;		private var _dragging:Boolean = false;		private var _enabled:Boolean = true;		private var _is_over:Boolean = false;		private var _offset:Object;				public static const VERSION:String = "1.0";		public var track:Sprite;		public var thumb:*;				public function ScrollBar():void {			_offset = {top:thumb.y, bottom:0 - thumb.y}						addEventListener(MouseEvent.MOUSE_DOWN, thumbMouseDownHandler);			addEventListener(MouseEvent.ROLL_OUT, rollOutHandler);			addEventListener(MouseEvent.ROLL_OVER, rollOverHandler);		}				private function rollOutHandler(event:MouseEvent):void {			if(!isActive) dispatchEvent(new Event(Event.DEACTIVATE));			_is_over = false;		}		private function rollOverHandler(event:MouseEvent):void {			if(!isActive) dispatchEvent(new Event(Event.ACTIVATE));			_is_over = true;		}		private function thumbMouseDownHandler(event:MouseEvent):void {			if(_enabled) {				_dragging = true;				if(event.target == thumb) {					_clickProps = {mouseY:thumb.mouseY}				} else if(event.target != thumb) {					if(mouseY / track.height > 0) {						percentage = percentage;						_clickProps = {mouseX:0, mouseY:0}					}				}								stage.addEventListener(MouseEvent.MOUSE_MOVE, thumbMouseMoveHandler);				stage.addEventListener(MouseEvent.MOUSE_UP, thumbMouseUpHandler);			}		}		private function thumbMouseMoveHandler(event:MouseEvent):void {			try {				if(_enabled) {					if(isNaN(_clickProps.mouseY)) _clickProps.mouseY = thumb.height / 2;										var pointer_tip:Number = mouseY - _clickProps.mouseY;					thumb.y = pointer_tip;										if(pointer_tip < 0 + _offset.top) {						thumb.y = 0 + _offset.top;					} else if(pointer_tip > track.height - thumb.height + _offset.bottom) {						thumb.y = track.height - thumb.height + _offset.bottom;					}										percentage = percentage;				}			} catch(e:Error) {				//trace("ScrollBar->thumbMouseMoveHandler;", e);			}		}		private function thumbMouseUpHandler(event:MouseEvent):void {			stage.removeEventListener(MouseEvent.MOUSE_UP, thumbMouseUpHandler);			stage.removeEventListener(MouseEvent.MOUSE_MOVE, thumbMouseMoveHandler);						_dragging = false;						if(_enabled && !isActive) dispatchEvent(new Event(Event.DEACTIVATE));		}				public function get isActive():Boolean {			if(_dragging) return true;			if(_is_over) return true;			return false;		}		public function enable(bool:Boolean=true):void {			if(bool) {				this._enabled = true;				visible = true;			} else {				this._enabled = false;				visible = false;				thumb.y = _offset.top;			}		}		public function get enabled():Boolean {			return this._enabled;		}		override public function set height(val:Number):void {			super.height = val;			restoreScale();						thumbMouseMoveHandler(null);		}		/**		 * top is the distance from the top (usu greater than 0)		 * bottom is the distance form the bottom (usu less than 0)		 */		public function offset(top:Number, bottom:Number=undefined):void {			if(isNaN(bottom)) bottom = top;			_offset = {top:top, bottom:bottom};		}		public function get percentage():Number {			return (thumb.y - _offset.top) / (track.height - thumb.height - _offset.top + _offset.bottom);		}		public function set percentage(p:Number):void {			if((p < 0) || (p > 1.0)) {				//throw new Error("ScrollBar->default; Number must be == 0 and <= 1.0 -- recieved " + p);				trace("ScrollBar->default; Number must be == 0 and <= 1.0 -- recieved " + p) 				if(p < 0) p = 0;				if(p > 1.0) p = 1.0;			}						//thumb.x = p * track.width; // - thumb.width / 2;			var complete:Function = function():void {				dispatchEvent(new Event(Event.CHANGE));			}			Tweener.addTween(thumb, {y:_offset.top + p * (track.height - thumb.height - _offset.top + _offset.bottom), time:0.1, transition:"easeOutCirc", onUpdate:complete, onComplete:complete});		}		public function restoreScale():void {			// fix any distortion			var w:Number = width;			var h:Number = height;			scaleX = scaleY = 1.0;			track.width = w;			track.height = h;		}		public function stopDragging():void {			thumbMouseUpHandler(new MouseEvent(MouseEvent.MOUSE_UP));		}		public function get version():String {			return ScrollBar.VERSION;		}	}}